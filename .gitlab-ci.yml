# SPDX-FileCopyrightText: 2016-2025 by pi-lar GmbH
# SPDX-License-Identifier: OSL-3.0


default:
  image: $CI_REGISTRY_IMAGE/ci-environment:$CI_COMMIT_BRANCH$CI_COMMIT_TAG$CI_MERGE_REQUEST_ID
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
cache:
  key: "${CI_PIPELINE_IID}${CI_COMMIT_SHA}${CI_RUNNER_TAGS}"
  paths:
    - .venv

stages:
  - environment
  - prepare
  - build
  - test
  - qa
  - release

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /WIP:/ || $CI_MERGE_REQUEST_TITLE =~ /Draft:/
      when: never
    - if: $CI_COMMIT_TAG == "latest_release"
      when: never
    - when: always

setup:
  stage: environment
  before_script:
    - docker info
  script:
    - sh -c '[ -z "$CI_DEPLOY_USER" ] &&  (echo "Please read CI.md for the gitlab pipeline setup." >&2) && exit 1 || exit 0'
    - echo "$CI_DEPLOY_PASSWORD" | docker login -u $CI_DEPLOY_USER $CI_REGISTRY --password-stdin
    - |
        docker build \
          --cache-from "$CI_REGISTRY_IMAGE/ci-environment:$CI_COMMIT_BRANCH$CI_COMMIT_TAG$CI_MERGE_REQUEST_ID" \
          -t $CI_REGISTRY_IMAGE/ci-environment:$CI_COMMIT_SHA \
          -t $CI_REGISTRY_IMAGE/ci-environment:$CI_COMMIT_BRANCH$CI_COMMIT_TAG$CI_MERGE_REQUEST_ID \
          -f configs/docker/ci-environment/Dockerfile \
          --build-arg CI_REPOSITORY_URL=$CI_REPOSITORY_URL \
          --build-arg GITLAB_USER_EMAIL=$GITLAB_USER_EMAIL \
          ./
    - docker push $CI_REGISTRY_IMAGE/ci-environment:$CI_COMMIT_BRANCH$CI_COMMIT_TAG$CI_MERGE_REQUEST_ID
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: $CI_JOB_MANUAL
    - if: $CI_COMMIT_TAG != null
    - if: $CI_MERGE_REQUEST_ID != null
    - changes:
        - configs/docker/ci-environment/Dockerfile
        - requirements.txt

ci_configuration:
  stage: prepare
  script: ./do script util/build_helper.py --prepare_ci
  artifacts:
    paths:
      - .gitlab-ci-build.yml
      - .gitlab-ci-deployment.yml
  rules:
    - if: $DYNAMIC_BUILDERS != null

crossbuild:
  stage: build
  trigger:
    include:
      - artifact: .gitlab-ci-build.yml
        job: ci_configuration
    strategy: depend
  rules:
    - if: $DYNAMIC_BUILDERS != null
  needs:
    - ci_configuration
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID

documentation:
  stage: build
  script: ./do doc
  artifacts:
    name: neuropil-documentation
    paths:
      - build/doc/html

docker_test_environment:
  stage: build
  script:
    - ./do clean
    - ./do ensure_dependencies
    - ./do build --RELEASE criterion
    - ./do build --DEBUG bindings tests
  artifacts:
    paths:
      - build
      - .venv
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG == null

docker_production_environment:
  stage: build
  script:
    - ./do ensure_dependencies
    - ./do build --RELEASE all
  artifacts:
    paths:
      - build
      - .venv
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG != null

unit_tests:
  stage: test
  script: ./do test
  retry:
    max: 2
  artifacts:
    reports:
      junit: build/neuropil_test_suite-junit.xml
    paths:
      - build/logs/*
      - build/core.*
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG == null
  needs:
    - docker_test_environment

code_tidy:
  stage: test
  script:
      - ./do tidy
  allow_failure: true
  artifacts:
    when: always
    name: tidy-logs
    paths:
      - build/tidy.log
      - build/tidy-clean.log
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_TAG == null'
  needs:
    - docker_test_environment

code_format:
  stage: test
  script:
      - ./do pipeline_format
  artifacts:
    when: always
    name: format-logs
    paths:
      - build/format.log
      - build/format-errors-clean.log
      - build/format-warnings-clean.log
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_TAG == null'
  needs:
    - docker_test_environment

smoke_tests:
  stage: qa
  script:
      - ulimit -a
      - ./do smoke --fail-fast
  retry:
    max: 2
  allow_failure: false
  artifacts:
    when: always
    reports:
      junit: build/smoke_test-junit.xml
    paths:
      - build/logs/*
      - build/core.*
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG == null
  needs:
    - docker_test_environment
    - job: unit_tests
      artifacts: false

nixos_tests:
  stage: qa
  script:
      - nix-env -iA nixpkgs.git && nix-shell --command exit
  allow_failure: true
  image: nixos/nix
  needs: []
  rules:
    - if: $CI_COMMIT_TAG == null

helgrind_tests:
  stage: qa
  script:
      - ./do helgrind
  allow_failure: true
  timeout: 15m
  artifacts:
    when: always
    name: helgrind
    paths:
      - build/helgrind.log
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG == null
  needs:
    - docker_test_environment
    - job: unit_tests
      artifacts: false

callgrind_tests:
  stage: qa
  script:
      - ./do callgrind
  allow_failure: true
  timeout: 15m
  artifacts:
    when: always
    name: callgrind
    paths:
      - build/callgrind.log
      - build/callgrind.out
      - build/callgrind.dot
      - build/callgrind.png
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG == null
  needs:
    - docker_test_environment
    - job: unit_tests
      artifacts: false

valgrind_tests:
  stage: qa
  script:
      - ./do valgrind
  allow_failure: true
  timeout: 15m
  artifacts:
    when: always
    name: valgrind
    paths:
      - build/valgrind.log
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG == null
  needs:
    - docker_test_environment
    - job: unit_tests
      artifacts: false

code_analyze:
  stage: qa
  script:
      - ./do analyze
  allow_failure: true
  artifacts:
    when: always
    name: scan-build
    paths:
      - build/analyze
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_TAG == null'
  needs:
    - docker_test_environment
    - job: unit_tests
      artifacts: false

pages:
  stage: release
  script:
    - mkdir -p public
    - mv build/doc/html/* public
  artifacts:
    paths:
    - public/
  needs:
    - documentation
  rules:
    - if: $CI_MERGE_REQUEST_ID != null
      when: never
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG != null

publish:
  stage: release
  rules:
    - if: $CI_MERGE_REQUEST_ID != null
      when: never
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG == null
      when: always
  trigger:
    include:
      - artifact: .gitlab-ci-deployment.yml
        job: ci_configuration
  needs:
    - ci_configuration

neuropil-k8s deployment:
  stage: release
  allow_failure: true
  rules:
    - if: $CI_MERGE_REQUEST_ID != null
      when: never
    - if: $CI_COMMIT_REF_PROTECTED
      when: always
  variables:
    NP_GIT_COMMIT: $CI_COMMIT_SHA
  trigger: 
    project: "simonklampt/neuropil-k8s"

update_latest_tag:
  stage: release
  script:
      - ./do script util/build_helper.py --gitlab_latest_release
  rules:
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG != null

gitlab-pypi:
  stage: release
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token ./.venv/bin/python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi build/bindings/python/dist/*
  rules:
    - if: $CI_MERGE_REQUEST_ID != null
      when: never
    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG != null
      when: always
  needs:
    - docker_production_environment

python_docker:
  stage: release
  before_script:
    - docker info
  script:
    - sh -c '[ -z "$CI_DEPLOY_USER" ] &&  (echo "Please read CI.md for the gitlab pipeline setup." >&2) && exit 1 || exit 0'
    - echo "$CI_DEPLOY_PASSWORD" | docker login -u $CI_DEPLOY_USER $CI_REGISTRY --password-stdin
    - |
        docker build \
          -t $CI_REGISTRY_IMAGE/python-environment:$CI_COMMIT_BRANCH$CI_COMMIT_TAG \
          -f configs/docker/python-environment/Dockerfile \
          --build-arg NEUROPIL_BASE_IMAGE=$CI_REGISTRY_IMAGE/prod-environment:$CI_COMMIT_BRANCH$CI_COMMIT_TAG \
          --build-arg GITLAB_USER_EMAIL=$GITLAB_USER_EMAIL \
          ./
    - docker push $CI_REGISTRY_IMAGE/python-environment:$CI_COMMIT_BRANCH$CI_COMMIT_TAG
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_MERGE_REQUEST_ID == null
  needs:
    - crossbuild
    - job: docker_test_environment
      optional: true
    - job: docker_production_environment
      optional: true
#pypi:
#  stage: release
#  script:
#    - ls build/bindings/python/dist/
#    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ ./.venv/bin/python -m twine upload build/bindings/python/dist/*
#  rules:
#    - if: $CI_MERGE_REQUEST_ID != null
#      when: never
#    - if: $CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG != null && $PYPI_TOKEN
#      when: always
#  needs:
#    - docker_production_environment
